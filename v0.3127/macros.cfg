####################################################################################
#                Print start macro with chamber heat waiting                       #
####################################################################################

[gcode_macro PRINT_START]
variable_bed_time: 60                                                                # This is the time for the heatbed to heat soak in secconds (300 is 5 minutes)
variable_minimum_chamber_temp: 30                                                    # Minimum chamber temp before chamber heating is triggered by slicer
variable_preheat_height: 30                                                          # Preheat Z height
variable_beep: False                                                                 # Wether you have a beeper or not
gcode:
  
  UPDATE_DELAYED_GCODE ID=HEATER_DELAY DURATION=0                                    # Disables HEATER_DELAY macro from running if its already on a timer
  
  # Parameters used throughout this macro
  
  {% set BED_TEMP = params.BED_TEMP | default(60) | float %}                         # Retrieve the bed temp from gcode
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(200) | float %}              # Retrieve the extruder temp from gcode
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP | default(30) | float %}                 # Retrieve the chamber temp from gcode
  {% set printer_max_y = printer.toolhead.axis_maximum.y %}
  {% set printer_max_x = printer.toolhead.axis_maximum.x %}
  
  # Preheat the heat bed and prepare hotend to be heated
  
  STATUS_HEATING                                                                     # Set LED status to heating
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                         # Start heating bed
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150                                  # Set extruder pre heat temp
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}                              # Wait for bed to reach target temp
  
  # Preheat chamber if needed and if not heat soak bed and home the printer
  
  {% if CHAMBER_TEMP > minimum_chamber_temp %}
    Respond MSG="Preparing to heat chamber!"
    G28	                                                                             # Home X, Y, and Z axes
    SET_FAN_SPEED FAN=filter SPEED=1.0                                               # Set air filter to max to filter air and preheat chamber
    SET_FAN_SPEED FAN=bed_fan SPEED=1.0                                              # Set bed_fan to max to preheat chamber
    Respond MSG="Chamber will now preheat to {CHAMBER_TEMP}c"
    G90                                                                              # Absolute positioning
    G0 X{printer_max_x / 2} Y{printer_max_y / 2} Z{preheat_height}                   # Center toolhead so fans move bed heat around better
    M400                                                                             # Wait for the move to complete
    M106 S255                                                                        # Set pcf to 100%
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}      # Wait for chamber to reach target
    M106 S0	                                                                         # Turn off pcf
  {% else %}
    RESPOND MSG="Soaking bed for {bed_time / 60} minutes!"
    G4 P{bed_time * 1000}                                                            # Wait for bed to temp soak
    G28	                                                                             # Home X, Y, and Z axes
    G90                                                                              # Absolute positioning
  {% endif %}
  
  # Extruder final heat
  
  STATUS_HEATING                                                                     # Set LED status to heating
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}                      # Set extruder temp
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}                           # Wait for extruder to reach target temp
  
  # Purge
  
  STATUS_PRINTING                                                                    # Set LED status to printing
  POOP                                                                               # Poop purge and start the print

[gcode_macro POOP]
variable_tip_distance: 10                                                            # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount
variable_purge_amount: 30                                                           # Amount of filament to be POOPed prior to printing.
variable_flow_rate: 12                                                              # Flow rate of POOP in mm3/s. Default is 12.
variable_cool_time: 7500                                                            # Time to cool POOP in milliseconds 
gcode:

  {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}                       # Calculate POOP move speed
  
  G92 E0                                                                            # Zero the extruder
  G90                                                                               # Absolute positioning
  G1 E{tip_distance} F3600                                                          # Move filament to nozzle tip
  G1 Z20 F3000                                                                      # Move away from bed
  G1 X10 Y10 Z0.0 F5000.0                                                           # Move to start position
  RESPOND MSG="Pooping..."
  G1 X10 Y10 Z7 E{purge_amount} F{purge_move_speed}                                 # Move up and POOP
  G1 X10 Y10 Z10                                                                    # Move away from POOP
  M106 S255                                                                         # Turn on part cooling fans to cool POOP
  G4 P7500                                                                          # Wait for POOP to cool
  M106 S0                                                                           # Turn off part cooling fans from cooling POOP
  RESPOND MSG="Flushing..."
  G1 X60 Y10  Z7 F10000                                                             # Move over to brush off POOP
  G1 Z0.4                                                                           # Move to POOP height
  G1 X5 Y10 Z0.4 F15000                                                             # Brush off POOP
  RESPOND MSG="Printing..."

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-10} F3600          ; park nozzle at rear
    UPDATE_DELAYED_GCODE ID=HEATER_DELAY DURATION=1800

[gcode_macro COOLDOWN]
gcode:
    UPDATE_DELAYED_GCODE ID=HEATER_DELAY DURATION=1

[delayed_gcode HEATER_DELAY]
gcode:
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=filter SPEED=0

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED